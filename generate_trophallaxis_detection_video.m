function generate_trophallaxis_detection_video(video, BBoxes, Scores, roiRect, outpath, outVidName, grid_on)
% GENERATE_TROPHALLAXIS_DETECTION_VIDEO - overlays trophallaxis detections on video. 
% Trophallaxis detections are presented as bounding boxes colorcoded
% according to the score of the detection. Optionally overlays gridlines.
%
% Syntax:  generate_trophallaxis_detection_video(video, BBoxes, Scores, roiRect, outpath, outVidName, grid_on)
%
% Inputs:
%    video - a VideoReader object of the video in which trophallaxis was detected
%    BBoxes - a cell array of bounding boxes indicating the posititions of 
%             detected trophallaxis. Generated by the function 'detect_trophallaxis'.
%    Scores - a cell array of scores of detected trophallaxis. Generated by 
%             the function 'detect_trophallaxis'.
%    roiRect - a 4-element numeric vector indicating the size and position of
%              the ROI in which trophallaxes was detected, in the form
%              [xmin ymin width height]. Generated by the function 'get_roi_for_trophallaxis_detection'.
%    outpath - a string of the directory in which the output video will be saved
%    outVidName - a string of the name of the generated video file
%    grid_on - a logical variable indicating whether or not to display gridlines
%              on the generated video.
%
%
% Subfunctions: insert_grid
%


%------------- BEGIN CODE --------------


VWObject = VideoWriter(fullfile(outpath,outVidName));
open(VWObject);

if grid_on
    
    % define grid lines:
    H = roiRect(4);
    W = roiRect(3);
    vgrid = 0:500:W;
    hgrid = 0:500:H;
    hlines = [zeros(length(hgrid),1), hgrid', W*ones(length(hgrid),1), hgrid'];
    vlines = [vgrid', zeros(length(vgrid),1), vgrid', H*ones(length(vgrid),1)];
end

n_frames = video.Duration.*video.FrameRate;

cmap = autumn(500);
cmap = flipud(cmap);
reversemsg = '';

for f = 1:n_frames
    
    % display progress
    msg = sprintf('frame %i out of %i \n', f, n_frames);
    fprintf([reversemsg, msg]);
    reversemsg = repmat(sprintf('\b'), 1, length(msg));
    
    I = readFrame(video);
    Inest = imcrop(I,roiRect);
    
    if grid_on
        IforVid = insert_grid(Inest,W,vgrid,hgrid,vlines,hlines);
    else
        IforVid = Inest;
    end
    
    % scaling the scores for color-coding detections
    scoreID = min(round(Scores{f}.*1000)-249,500);
    
    % mark detections with color-coded bounding boxes
    IwithDetections = insertShape(IforVid,'rect', BBoxes{f} ,'Color',cmap(scoreID,:).*255,'LineWidth',8);
    
    currFrame = im2frame(IwithDetections);
    writeVideo(VWObject,currFrame)
    
end

close(VWObject)



end

%%
function IwithGrid = insert_grid(I,W,vgrid,hgrid,vlines,hlines)

Inest_grid = insertShape(I, 'Line', [hlines; vlines], 'Color',[120 120 120],'LineWidth',6);
IwithHlineTicksLeft = insertText(Inest_grid,[5*ones(size(hgrid')),hgrid'+2],hgrid,...
    'FontSize',50,'TextColor',[200 200 200],'BoxOpacity',0);
IwithHlineTicks = insertText(IwithHlineTicksLeft, [ones(size(hgrid'))*(W-5),hgrid'+2],hgrid,...
    'FontSize',50,'TextColor',[200 200 200],'BoxOpacity',0,'AnchorPoint','RightTop');
IwithVlineTicksTop = insertText(IwithHlineTicks, [vgrid(1:end-1)'+5,2*ones(size(vgrid(1:end-1)'))],...
    vgrid(1:end-1),'FontSize',50,'TextColor',[200 200 200],'BoxOpacity',0);
IwithTicks = insertText(IwithVlineTicksTop, [vgrid(1:end-1)'+5,(hgrid(end)+2)*ones(size(vgrid(1:end-1)'))],...
    vgrid(1:end-1),'FontSize',50,'TextColor',[200 200 200],'BoxOpacity',0);
IwithGrid = IwithTicks;

end
%------------- END OF CODE --------------